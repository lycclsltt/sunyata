{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Agileutil \u82f1\u6587\u6587\u6863 Agileutil\u662f\u4e00\u4e2aPython3 RPC\u6846\u67b6\u3002\u57fa\u4e8e\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u5c01\u88c5\u4e86rpc/http/orm/log\u7b49\u5e38\u7528\u7ec4\u4ef6\uff0c\u63d0\u4f9b\u4e86\u7b80\u6d01\u7684API\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5f88\u5feb\u4e0a\u624b\uff0c\u5feb\u901f\u8fdb\u884c\u4e1a\u52a1\u5f00\u53d1\u3002 \u5b89\u88c5 pip install agileutil RPC \u8fd9\u662fAgileutil\u6700\u6838\u5fc3\u7684\u529f\u80fd\u3002\u57fa\u4e8eTCP\u534f\u8bae\u548cPickle\u5e8f\u5217\u5316\u65b9\u5f0f\u5b9e\u73b0\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u57fa\u4e8eTCP\u534f\u8bae\u7684\u670d\u52a1\u7aef\u4f8b\u5b50\u3002\u53ef\u53c2\u8003\u4e0b\u9762\u7684\u6b65\u9aa4\u8fdb\u884c\u5f00\u53d1\uff1a - \u521b\u5efa\u4e00\u4e2aTcpRpcServer\u5bf9\u8c61, \u6307\u5b9a\u670d\u52a1\u7aef\u76d1\u542c\u5730\u5740\u548c\u7aef\u53e3 - \u8c03\u7528regist()\u65b9\u6cd5\uff0c\u5c06\u63d0\u4f9b\u670d\u52a1\u7684\u65b9\u6cd5\u6ce8\u518c\u5230\u670d\u52a1\u7aef\uff08\u53ea\u6709\u8c03\u7528regist()\u65b9\u6cd5\u6ce8\u518c\u8fc7\u7684\u670d\u52a1\uff0c\u624d\u53ef\u4ee5\u88ab\u5ba2\u6237\u7aef\u8bbf\u95ee\uff09 - \u8c03\u7528serve()\u65b9\u6cd5\uff0c\u5f00\u59cb\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 TCP RPC \u670d\u52a1\u7aef from agileutil.rpc.server import TcpRpcServer def sayHello(name): return 'hello ' + name nationServer = TcpRpcServer('0.0.0.0', 9988, workers=4) nationServer.regist(sayHello) nationServer.serve() TCP RPC \u5ba2\u6237\u7aef \u5ba2\u6237\u7aef\u4f8b\u5b50\uff1a - \u521b\u5efaTcpRpcClient\u5bf9\u8c61\uff0c\u6307\u5b9aRPC\u670d\u52a1\u7aef\u5730\u5740 - \u901a\u8fc7call()\u65b9\u6cd5\uff0c\u6307\u5b9a\u670d\u52a1\u7aef\u65b9\u6cd5\u540d\u79f0\u548c\u53c2\u6570\uff08\u6ce8\u610f\uff1a\u5982\u679c\u65b9\u6cd5\u540d\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u670d\u52a1\u7aef\u672a\u8c03\u7528regist()\u65b9\u6cd5\u6ce8\u518c\uff0c\u90a3\u4e48call\uff08\uff09\u65b9\u6cd5\u5c06\u629b\u51fa\u5f02\u5e38\uff09 - call() \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u548c\u5728\u672c\u5730\u8c03\u7528\u4e00\u6837\uff0c\u539f\u6765\u662f\u4ec0\u4e48\u8fd4\u56de\u7c7b\u578b\uff0c\u5c31\u8fd8\u662f\u4ec0\u4e48\uff08\u4f8b\u5982\u8fd4\u56de\u5b57\u5178\u3001\u5217\u8868\u3001\u5bf9\u8c61\u751a\u81f3\u5185\u7f6e\u7c7b\u578b\uff0c\u7ecf\u8fc7\u5e8f\u5217\u5316\u540e\uff0c\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\uff09 from agileutil.rpc.client import TcpRpcClient c = TcpRpcClient('127.0.0.1', 9988) resp = c.call(func = 'sayHello', args = ('zhangsan')) print('resp', resp) Tornado RPC \u670d\u52a1\u7aef TornadoTcpRpcServer\u540c\u6837\u662f\u57fa\u4e8eTCP\u534f\u8bae\u7684RPC\u670d\u52a1\u7aef\uff0c\u53ea\u662f\u5e95\u5c42\u662f\u57fa\u4e8eTornado\u9ad8\u6027\u80fd\u7f51\u7edc\u5e93\u5b9e\u73b0\u3002\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528TornadoTcpRpcServer\u521b\u5efa\u4e00\u4e2aTCP\u670d\u52a1\uff0c\u53c2\u8003TcpRpcServer\u7684\u521b\u5efa\u6b65\u9aa4\uff1a - \u521b\u5efa\u4e00\u4e2aTornadoTcpRpcServer\u5bf9\u8c61\uff0c\u6307\u5b9a\u76d1\u542c\u7684\u5730\u5740\u548c\u7aef\u53e3 - \u8c03\u7528regist()\u6ce8\u518c\u9700\u8981\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684\u65b9\u6cd5 - \u8c03\u7528server()\u65b9\u6cd5\u5f00\u59cb\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 from agileutil.rpc.server import TornadoTcpRpcServer def rows(): return {'name' : 123} s = TornadoTcpRpcServer('127.0.0.1', 9988) s.regist(rows) s.serve() Tornado RPC \u5ba2\u6237\u7aef \u5ba2\u6237\u7aef\u4f7f\u7528TcpRpcClient\u5bf9\u8c61\u5373\u53ef\u3002 from agileutil.rpc.client import TcpRpcClient c = TcpRpcClient('127.0.0.1', 9988) resp = c.call(func = 'rows')) print('resp', resp) HTTP RPC \u670d\u52a1\u7aef Agileutil\u4e5f\u63d0\u4f9b\u4e86\u57fa\u4e8eHTTP\u534f\u8bae\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002\u5e95\u5c42\u662f\u57fa\u4e8e\u9ad8\u6027\u80fd\u7684Sanic\u5f02\u6b65web\u6846\u67b6\u5b9e\u73b0\u7684\uff0c\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u548cTcpRpcServer\u7684\u7528\u6cd5\u7c7b\u4f3c: from agileutil.rpc.server import HttpRpcServer def sayHello(name): return 'hello ' + name s = HttpRpcServer('0.0.0.0', 9988, workers=1) s.regist(sayHello) s.serve() HTTP RPC Client \u540c\u6837\u7684\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u5bf9\u5e94\u7684HttpRpcClient\u5bf9\u8c61: from agileutil.rpc.client import HttpRpcClient cli = HttpRpcClient('127.0.0.1', 9988) for i in range(10): resp = cli.call(func = 'sayHello', args=('zhangsan')) print('resp', resp) UDP RPC \u670d\u52a1\u7aef \u5982\u679c\u60f3\u8981\u4f7f\u7528UDP\u534f\u8bae\uff0c\u5c06TcpRpcServer\u66ff\u6362\u4e3aUdpRpcServer\u5373\u53ef\u3002\u4e00\u4e2aUDP RPC\u670d\u52a1\u7aef\u7684\u4f8b\u5b50\u5982\u4e0b\uff0c\u4e0eTCP\u7c7b\u4f3c\uff1a - \u521b\u5efaUdpRpcServer\u5bf9\u8c61\uff0c\u6307\u5b9a\u76d1\u542c\u7684\u5730\u5740\u548c\u7aef\u53e3 - \u8c03\u7528regist()\u65b9\u6cd5\uff0c\u5c06\u9700\u8981\u88ab\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u65b9\u6cd5\u6ce8\u518c\u8fdb\u53bb - \u8c03\u7528serve()\u65b9\u6cd5\u5f00\u59cb\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 - \u8fd4\u56de\u7684\u5185\u5bb9\u548c\u8c03\u7528\u672c\u5730\u65b9\u6cd5\u6ca1\u6709\u5dee\u522b\uff0c\u6846\u67b6\u5185\u90e8\u901a\u8fc7\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u7a0b\u5e8f\u5185\u7684\u5bf9\u8c61\uff08\u5b57\u5178\u3001\u5217\u8868\u3001\u5185\u7f6e\u7c7b\u578b\u3001\u5404\u79cd\u7c7b\u5bf9\u8c61\u7b49\u7b49\uff09 from agileutil.rpc.server import UdpRpcServer def sayHello(name): return 'hello ' + name s = UdpRpcServer('0.0.0.0', 9988) s.regist(sayHello) s.serve() UDP RPC \u5ba2\u6237\u7aef \u4e00\u4e2aUDP\u5ba2\u6237\u7aef\u7684\u4f8b\u5b50\uff1a - \u521b\u5efaUdpRpcClient\u5bf9\u8c61\uff0c\u6307\u5b9a\u670d\u52a1\u7aef\u5730\u5740\u548c\u7aef\u53e3 - \u8c03\u7528call()\u65b9\u6cd5\uff0c\u5e76\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u65b9\u6cd5\u540d\u79f0\u548c\u53c2\u6570 - \u8fd4\u56de\u7684\u5185\u5bb9\u548c\u8c03\u7528\u672c\u5730\u65b9\u6cd5\u6ca1\u6709\u5dee\u522b\uff0c\u6846\u67b6\u5185\u90e8\u901a\u8fc7\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u7a0b\u5e8f\u5185\u7684\u5bf9\u8c61\uff08\u5b57\u5178\u3001\u5217\u8868\u3001\u5185\u7f6e\u7c7b\u578b\u3001\u5404\u79cd\u7c7b\u5bf9\u8c61\u7b49\u7b49\uff09 from agileutil.rpc.client import UdpRpcClient cli = UdpRpcClient('127.0.0.1', 9988) for i in range(5000): resp = cli.call(func = 'sayHello', args =('xiaoming') ) print(resp) \u670d\u52a1\u53d1\u73b0 Agileutil\u65e2\u652f\u6301\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u76f4\u8fde\uff0c\u4e5f\u652f\u6301\u670d\u52a1\u6ce8\u518c\u53d1\u73b0 \uff08\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u76f4\u8fde\u7684\u4f8b\u5b50\uff0c\u8bf7\u53c2\u8003\u4e0a\u9762\u7684TcpRpcServer\u90e8\u5206\uff09\u3002 \u76ee\u524d\u4ec5\u652f\u6301\u57fa\u4e8eConsul\u7684\u670d\u52a1\u53d1\u73b0\uff0c\u672a\u6765\u8ba1\u5212\u652f\u6301etcd\u3002 \u5065\u5eb7\u68c0\u67e5 \u57fa\u4e8eConsul\u7684Check\u673a\u5236\u3002\u670d\u52a1\u6ce8\u518c\u540e\uff0c\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u5b9a\u671f\u7684\u5065\u5eb7\u68c0\u67e5\uff08\u9ed8\u8ba4\u4e3aTCP\u7aef\u53e3\u68c0\u67e5\uff0c\u672a\u6765\u6709\u8ba1\u5212\u652f\u6301HTTP\u5065\u5eb7\u68c0\u67e5\uff09\u3002\u4e00\u65e6\u670d\u52a1\u8fdb\u7a0b\u6302\u6389\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5c06\u8bf7\u6c42\u5230\u5176\u4ed6\u5065\u5eb7\u7684\u670d\u52a1\u8282\u70b9\u4e0a\u3002\u540c\u65f6\u5ba2\u6237\u7aef\u4e5f\u5b58\u5728\u91cd\u8bd5\u673a\u5236\uff0c\u7531\u4e8e\u5065\u5eb7\u68c0\u67e5\u5b58\u5728\u65f6\u95f4\u95f4\u9694\uff0c\u53ef\u80fd\u670d\u52a1\u7aef\u8fdb\u7a0b\u6302\u6389\u540e\uff0c\u4ecd\u9700\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u624d\u88abConsul\u53d1\u73b0\uff0c\u8fd9\u65f6\u5ba2\u6237\u7aef\u5982\u679c\u8bf7\u6c42\u5230\u6302\u6389\u7684\u670d\u52a1\u8282\u70b9\u4e0a\u5931\u8d25\u540e\uff0c\u5ba2\u6237\u7aef\u4f1a\u5c1d\u8bd5\u8bf7\u6c42\u5176\u4ed6\u670d\u52a1\u8282\u70b9\u8fdb\u884c\u91cd\u8bd5\u3002 \u5feb\u901f\u5f00\u59cb \u670d\u52a1\u6ce8\u518c\u53d1\u73b0\u7684\u4f7f\u7528\u4e5f\u5f88\u7b80\u5355\uff0c\u8bf7\u8010\u5fc3\u770b\u5b8c\u3002 - \u7b2c\u4e00\u6b65\uff0c\u4f60\u9700\u8981\u5b9a\u4e49\u4e00\u4e2aDiscoverConfig\u5bf9\u8c61\u3002 \u6307\u5b9a\u7528\u4e8e\u670d\u52a1\u6ce8\u518c\u53d1\u73b0\u7684Consul\u7684\u5730\u5740\u548c\u7aef\u53e3\u3002\u540c\u65f6\u901a\u8fc7serviceName\u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u670d\u52a1\u540d\u79f0\uff08\u7528\u4e8e\u6807\u8bb0\u670d\u52a1\u7aef\u670d\u52a1\uff09\u3002\u540c\u65f6\u6307\u5b9a\u670d\u52a1\u7aef\u76d1\u542c\u7684\u5730\u5740\u548c\u7aef\u53e3\u3002 from agileutil.rpc.discovery import DiscoveryConfig disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) \u8bf4\u660e: 1.consulHost \u548c consulPort \u53c2\u6570\u6307\u5b9aConsul\u7684\u5730\u5740\u548c\u7aef\u53e3 2.ServiceName \u53c2\u6570\u7528\u4e8e\u6807\u8bb0\u670d\u52a1\u7aef\u540d\u79f0\uff0c\u5e76\u901a\u8fc7\u670d\u52a1\u540d\u79f0\u8fdb\u884c\u670d\u52a1\u53d1\u73b0\uff0c\u9700\u8981\u4fdd\u8bc1\u5168\u5c40\u552f\u4e00 3.serviceHost\u548cservicePort\u53c2\u6570\u6307\u5b9a\u670d\u52a1\u7aef\u76d1\u542c\u7684\u7aef\u53e3\u548c\u5730\u5740 \u7b2c\u4e8c\u6b65\u3001\u8c03\u7528setDiscoverConfig()\u65b9\u6cd5\u5c06DiscoveryConfig\u5bf9\u8c61\u4f20\u5165 \u7b2c\u4e09\u6b65\uff0c\u4e4b\u540e\u8c03\u7528serve()\u65b9\u6cd5\uff0c\u5f00\u59cb\u5904\u7406\u8bf7\u6c42 s = TcpRpcServer('0.0.0.0', 9988) s.regist(sayHello) disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) s.setDiscoverConfig(disconf) s.serve() \u5b8c\u6574\u7684\u670d\u52a1\u7aef\u793a\u4f8b from agileutil.rpc.server import TcpRpcServer from agileutil.rpc.discovery import DiscoveryConfig from agileutil.util import local_ip def sayHello(): return 'hello ' s = TcpRpcServer('0.0.0.0', 9988) s.regist(sayHello) disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) s.setDiscoverConfig(disconf) s.serve() \u5b8c\u6574\u7684\u5ba2\u6237\u7aef\u793a\u4f8b \u521b\u5efaDiscoveryConfig\u5bf9\u8c61\uff0c\u6307\u5b9aConsul\u7684\u5730\u5740\u7aef\u53e3. serviceName\u53c2\u6570\u548c\u670d\u52a1\u7aef\u7684\u4fdd\u6301\u4e00\u81f4\uff0c\u4e14\u5168\u5c40\u552f\u4e00 \u8c03\u7528call()\u65b9\u6cd5\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u65b9\u6cd5\u540d\u548c\u53c2\u6570 from agileutil.rpc.client import DiscoveryTcpRpcClient from agileutil.rpc.discovery import DiscoveryConfig cli = DiscoveryTcpRpcClient(DiscoveryConfig(consulHost='192.168.19.103', consulPort=8500, serviceName='test-rpc-server')) for i in range(10): resp = cli.call(func = 'sayHello') print(resp) ORM \u5b9a\u4e49\u4e00\u4e2anation\u8868\uff0c\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5\uff1aid\u5b57\u6bb5\u548cname\u5b57\u6bb5 CREATE TABLE `nation` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(32) DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 \u9996\u5148\u8c03\u7528Model.init()\u65b9\u6cd5\uff0c\u8bbe\u7f6emysql\u8fde\u63a5\u5730\u5740\u7b49\u4fe1\u606f \u7136\u540e\u4e3anation\u8868\u5b9a\u4e00\u4e2aNation\u7c7b\uff0c\u5e76\u7ee7\u627f\u81eaModel\u7c7b \u6307\u5b9a\u5b57\u6bb5\u7c7b\u578b from agileutil.orm import Model, IntField, CharField Model.init('127.0.0.1', 3306, 'root', '', 'test2', min_conn_num=10) class Nation(Model): tableName = 'nation' #required primaryKey = 'id' #required id = IntField() #field type int name = CharField() #field type char \u521b\u5efa\u8bb0\u5f55 Nation(name='test').create() \u67e5\u8be2\u4e00\u6761\u8bb0\u5f55 obj = Nation.filter('name', '=', 'test').first() print(obj.name, obj.id) \u67e5\u8be2\u591a\u6761\u8bb0\u5f55 objs = Nation.filter('name', '=', 'test') for obj in objs: print(obj.name, obj.id) \u4fee\u6539\u8bb0\u5f55 obj = Nation.filter('name', '=', 'test').first() obj.name = 'test update' obj.update() \u5220\u9664\u8bb0\u5f55 Nation.filter('name', '=', 'test').delete() \u53e6\u4e00\u79cd\u5220\u9664\u7684\u65b9\u5f0f obj = Nation.filter('name', '=', 'test').first() obj.delete() PoolDB PooolDB\u5b9e\u73b0\u4e86\u6570\u636e\u5e93\u8fde\u63a5\u6c60\uff0c\u5e76\u4e14ORM\u529f\u80fd\u662f\u57fa\u4e8ePoolDB\u5b9e\u73b0\u7684\u3002\u5bf9\u4e8e\u5e38\u7528\u7684\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u4f7f\u7528ORM\uff0c\u76f4\u63a5\u4f7f\u7528PoolDB\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u5b9a\u4e49 PoolDB \u5bf9\u8c61. from agileutil.db4 import PoolDB db = PoolDB(host='127.0.0.1', port=3306, user='root', passwd='', dbName='test2', min_conn_num=10) db.connect() \u67e5\u8be2\u8bb0\u5f55 sql = 'select * from nation' rows = db.query(sql) print(rows) \u5220\u9664\u3001\u4fee\u6539\u3001\u63d2\u5165\u8bb0\u5f55 sql = insert into nation(name) values('test') effect, lastid = db.update(sql) print(effect,lastid) sql = delete from nation where name='test' effect, _ = db.update(sql) print(effect,lastid) DB DB \u662f\u4e00\u4e2a\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u7c7b\uff0c\u548cPoolDB\u7684\u533a\u522b\u662f\uff0c\u5b83\u4e0d\u652f\u6301\u6570\u636e\u5e93\u8fde\u63a5\u6c60\uff0c\u56e0\u6b64\u66f4\u5efa\u8bae\u4f7f\u7528PoolDB.\u5b83\u7684\u7528\u6cd5\u548cPoolDB\u662f\u76f8\u4f3c\u7684\u3002 \u5b9a\u4e49DB\u5bf9\u8c61 from agileutil.db import DB db = DB(host='127.0.0.1', port=3306, user='root', passwd='', dbName='test2') \u67e5\u8be2\u8bb0\u5f55 sql = 'select * from nation' rows = db.query(sql) print(rows) \u4fee\u6539\u3001\u5220\u9664\u3001\u63d2\u5165\u8bb0\u5f55 sql = insert into nation(name) values('test') effetc = db.update(sql) print(effetc, db.lastrowid()) \u65e5\u5fd7 Agileutil\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684Log\u5bf9\u8c61\uff0c\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\u3002 from agileutil.log import Log logger = Log('./debug.log') logger.info(123, '456') logger.warning('warning') logger.error('error') \u65e5\u5fd7\u5207\u5272 \u9ed8\u8ba4\u65e5\u5fd7\u6309\u5929\u5206\u5272\uff0c\u4fdd\u7559\u6700\u8fd17\u5929\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u65e5\u5fd7\u4fdd\u7559\u7684\u5929\u6570\u3002 logger = Log('./debug.log', logSaveDays=7) logger.info('info') \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5f3a\u5236\u4e0d\u5207\u5272\u65e5\u5fd7\uff0c\u901a\u8fc7isRotate\u53c2\u6570\u3002 logger = Log('./debug.log', isRotate=False) logger.info('info') ERROR\u7ea7\u522b\u65e5\u5fd7 \u9ed8\u8ba4\u7684\uff0cERROR\u7ea7\u522b\u7684\u65e5\u5fd7\uff0c\u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u4f1a\u88ab\u6807\u7ea2\u8868\u793a\uff0c\u66f4\u52a0\u9192\u76ee\uff0c\u4fbf\u4e8e\u6392\u67e5\u95ee\u9898\u3002 logger.error('runtimee exception raise') \u81f4\u8c22","title":"Agileutil"},{"location":"#agileutil","text":"\u82f1\u6587\u6587\u6863 Agileutil\u662f\u4e00\u4e2aPython3 RPC\u6846\u67b6\u3002\u57fa\u4e8e\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u5c01\u88c5\u4e86rpc/http/orm/log\u7b49\u5e38\u7528\u7ec4\u4ef6\uff0c\u63d0\u4f9b\u4e86\u7b80\u6d01\u7684API\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5f88\u5feb\u4e0a\u624b\uff0c\u5feb\u901f\u8fdb\u884c\u4e1a\u52a1\u5f00\u53d1\u3002","title":"Agileutil"},{"location":"#_1","text":"pip install agileutil","title":"\u5b89\u88c5"},{"location":"#rpc","text":"\u8fd9\u662fAgileutil\u6700\u6838\u5fc3\u7684\u529f\u80fd\u3002\u57fa\u4e8eTCP\u534f\u8bae\u548cPickle\u5e8f\u5217\u5316\u65b9\u5f0f\u5b9e\u73b0\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u57fa\u4e8eTCP\u534f\u8bae\u7684\u670d\u52a1\u7aef\u4f8b\u5b50\u3002\u53ef\u53c2\u8003\u4e0b\u9762\u7684\u6b65\u9aa4\u8fdb\u884c\u5f00\u53d1\uff1a - \u521b\u5efa\u4e00\u4e2aTcpRpcServer\u5bf9\u8c61, \u6307\u5b9a\u670d\u52a1\u7aef\u76d1\u542c\u5730\u5740\u548c\u7aef\u53e3 - \u8c03\u7528regist()\u65b9\u6cd5\uff0c\u5c06\u63d0\u4f9b\u670d\u52a1\u7684\u65b9\u6cd5\u6ce8\u518c\u5230\u670d\u52a1\u7aef\uff08\u53ea\u6709\u8c03\u7528regist()\u65b9\u6cd5\u6ce8\u518c\u8fc7\u7684\u670d\u52a1\uff0c\u624d\u53ef\u4ee5\u88ab\u5ba2\u6237\u7aef\u8bbf\u95ee\uff09 - \u8c03\u7528serve()\u65b9\u6cd5\uff0c\u5f00\u59cb\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42","title":"RPC"},{"location":"#tcp-rpc","text":"from agileutil.rpc.server import TcpRpcServer def sayHello(name): return 'hello ' + name nationServer = TcpRpcServer('0.0.0.0', 9988, workers=4) nationServer.regist(sayHello) nationServer.serve()","title":"TCP RPC \u670d\u52a1\u7aef"},{"location":"#tcp-rpc_1","text":"\u5ba2\u6237\u7aef\u4f8b\u5b50\uff1a - \u521b\u5efaTcpRpcClient\u5bf9\u8c61\uff0c\u6307\u5b9aRPC\u670d\u52a1\u7aef\u5730\u5740 - \u901a\u8fc7call()\u65b9\u6cd5\uff0c\u6307\u5b9a\u670d\u52a1\u7aef\u65b9\u6cd5\u540d\u79f0\u548c\u53c2\u6570\uff08\u6ce8\u610f\uff1a\u5982\u679c\u65b9\u6cd5\u540d\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u670d\u52a1\u7aef\u672a\u8c03\u7528regist()\u65b9\u6cd5\u6ce8\u518c\uff0c\u90a3\u4e48call\uff08\uff09\u65b9\u6cd5\u5c06\u629b\u51fa\u5f02\u5e38\uff09 - call() \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u548c\u5728\u672c\u5730\u8c03\u7528\u4e00\u6837\uff0c\u539f\u6765\u662f\u4ec0\u4e48\u8fd4\u56de\u7c7b\u578b\uff0c\u5c31\u8fd8\u662f\u4ec0\u4e48\uff08\u4f8b\u5982\u8fd4\u56de\u5b57\u5178\u3001\u5217\u8868\u3001\u5bf9\u8c61\u751a\u81f3\u5185\u7f6e\u7c7b\u578b\uff0c\u7ecf\u8fc7\u5e8f\u5217\u5316\u540e\uff0c\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\uff09 from agileutil.rpc.client import TcpRpcClient c = TcpRpcClient('127.0.0.1', 9988) resp = c.call(func = 'sayHello', args = ('zhangsan')) print('resp', resp)","title":"TCP RPC \u5ba2\u6237\u7aef"},{"location":"#tornado-rpc","text":"TornadoTcpRpcServer\u540c\u6837\u662f\u57fa\u4e8eTCP\u534f\u8bae\u7684RPC\u670d\u52a1\u7aef\uff0c\u53ea\u662f\u5e95\u5c42\u662f\u57fa\u4e8eTornado\u9ad8\u6027\u80fd\u7f51\u7edc\u5e93\u5b9e\u73b0\u3002\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528TornadoTcpRpcServer\u521b\u5efa\u4e00\u4e2aTCP\u670d\u52a1\uff0c\u53c2\u8003TcpRpcServer\u7684\u521b\u5efa\u6b65\u9aa4\uff1a - \u521b\u5efa\u4e00\u4e2aTornadoTcpRpcServer\u5bf9\u8c61\uff0c\u6307\u5b9a\u76d1\u542c\u7684\u5730\u5740\u548c\u7aef\u53e3 - \u8c03\u7528regist()\u6ce8\u518c\u9700\u8981\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684\u65b9\u6cd5 - \u8c03\u7528server()\u65b9\u6cd5\u5f00\u59cb\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 from agileutil.rpc.server import TornadoTcpRpcServer def rows(): return {'name' : 123} s = TornadoTcpRpcServer('127.0.0.1', 9988) s.regist(rows) s.serve()","title":"Tornado RPC \u670d\u52a1\u7aef"},{"location":"#tornado-rpc_1","text":"\u5ba2\u6237\u7aef\u4f7f\u7528TcpRpcClient\u5bf9\u8c61\u5373\u53ef\u3002 from agileutil.rpc.client import TcpRpcClient c = TcpRpcClient('127.0.0.1', 9988) resp = c.call(func = 'rows')) print('resp', resp)","title":"Tornado RPC \u5ba2\u6237\u7aef"},{"location":"#http-rpc","text":"Agileutil\u4e5f\u63d0\u4f9b\u4e86\u57fa\u4e8eHTTP\u534f\u8bae\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002\u5e95\u5c42\u662f\u57fa\u4e8e\u9ad8\u6027\u80fd\u7684Sanic\u5f02\u6b65web\u6846\u67b6\u5b9e\u73b0\u7684\uff0c\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u548cTcpRpcServer\u7684\u7528\u6cd5\u7c7b\u4f3c: from agileutil.rpc.server import HttpRpcServer def sayHello(name): return 'hello ' + name s = HttpRpcServer('0.0.0.0', 9988, workers=1) s.regist(sayHello) s.serve()","title":"HTTP RPC \u670d\u52a1\u7aef"},{"location":"#http-rpc-client","text":"\u540c\u6837\u7684\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u5bf9\u5e94\u7684HttpRpcClient\u5bf9\u8c61: from agileutil.rpc.client import HttpRpcClient cli = HttpRpcClient('127.0.0.1', 9988) for i in range(10): resp = cli.call(func = 'sayHello', args=('zhangsan')) print('resp', resp)","title":"HTTP RPC Client"},{"location":"#udp-rpc","text":"\u5982\u679c\u60f3\u8981\u4f7f\u7528UDP\u534f\u8bae\uff0c\u5c06TcpRpcServer\u66ff\u6362\u4e3aUdpRpcServer\u5373\u53ef\u3002\u4e00\u4e2aUDP RPC\u670d\u52a1\u7aef\u7684\u4f8b\u5b50\u5982\u4e0b\uff0c\u4e0eTCP\u7c7b\u4f3c\uff1a - \u521b\u5efaUdpRpcServer\u5bf9\u8c61\uff0c\u6307\u5b9a\u76d1\u542c\u7684\u5730\u5740\u548c\u7aef\u53e3 - \u8c03\u7528regist()\u65b9\u6cd5\uff0c\u5c06\u9700\u8981\u88ab\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u65b9\u6cd5\u6ce8\u518c\u8fdb\u53bb - \u8c03\u7528serve()\u65b9\u6cd5\u5f00\u59cb\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 - \u8fd4\u56de\u7684\u5185\u5bb9\u548c\u8c03\u7528\u672c\u5730\u65b9\u6cd5\u6ca1\u6709\u5dee\u522b\uff0c\u6846\u67b6\u5185\u90e8\u901a\u8fc7\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u7a0b\u5e8f\u5185\u7684\u5bf9\u8c61\uff08\u5b57\u5178\u3001\u5217\u8868\u3001\u5185\u7f6e\u7c7b\u578b\u3001\u5404\u79cd\u7c7b\u5bf9\u8c61\u7b49\u7b49\uff09 from agileutil.rpc.server import UdpRpcServer def sayHello(name): return 'hello ' + name s = UdpRpcServer('0.0.0.0', 9988) s.regist(sayHello) s.serve()","title":"UDP RPC \u670d\u52a1\u7aef"},{"location":"#udp-rpc_1","text":"\u4e00\u4e2aUDP\u5ba2\u6237\u7aef\u7684\u4f8b\u5b50\uff1a - \u521b\u5efaUdpRpcClient\u5bf9\u8c61\uff0c\u6307\u5b9a\u670d\u52a1\u7aef\u5730\u5740\u548c\u7aef\u53e3 - \u8c03\u7528call()\u65b9\u6cd5\uff0c\u5e76\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u65b9\u6cd5\u540d\u79f0\u548c\u53c2\u6570 - \u8fd4\u56de\u7684\u5185\u5bb9\u548c\u8c03\u7528\u672c\u5730\u65b9\u6cd5\u6ca1\u6709\u5dee\u522b\uff0c\u6846\u67b6\u5185\u90e8\u901a\u8fc7\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u7a0b\u5e8f\u5185\u7684\u5bf9\u8c61\uff08\u5b57\u5178\u3001\u5217\u8868\u3001\u5185\u7f6e\u7c7b\u578b\u3001\u5404\u79cd\u7c7b\u5bf9\u8c61\u7b49\u7b49\uff09 from agileutil.rpc.client import UdpRpcClient cli = UdpRpcClient('127.0.0.1', 9988) for i in range(5000): resp = cli.call(func = 'sayHello', args =('xiaoming') ) print(resp)","title":"UDP RPC \u5ba2\u6237\u7aef"},{"location":"#_2","text":"Agileutil\u65e2\u652f\u6301\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u76f4\u8fde\uff0c\u4e5f\u652f\u6301\u670d\u52a1\u6ce8\u518c\u53d1\u73b0 \uff08\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u76f4\u8fde\u7684\u4f8b\u5b50\uff0c\u8bf7\u53c2\u8003\u4e0a\u9762\u7684TcpRpcServer\u90e8\u5206\uff09\u3002 \u76ee\u524d\u4ec5\u652f\u6301\u57fa\u4e8eConsul\u7684\u670d\u52a1\u53d1\u73b0\uff0c\u672a\u6765\u8ba1\u5212\u652f\u6301etcd\u3002","title":"\u670d\u52a1\u53d1\u73b0"},{"location":"#_3","text":"\u57fa\u4e8eConsul\u7684Check\u673a\u5236\u3002\u670d\u52a1\u6ce8\u518c\u540e\uff0c\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u5b9a\u671f\u7684\u5065\u5eb7\u68c0\u67e5\uff08\u9ed8\u8ba4\u4e3aTCP\u7aef\u53e3\u68c0\u67e5\uff0c\u672a\u6765\u6709\u8ba1\u5212\u652f\u6301HTTP\u5065\u5eb7\u68c0\u67e5\uff09\u3002\u4e00\u65e6\u670d\u52a1\u8fdb\u7a0b\u6302\u6389\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5c06\u8bf7\u6c42\u5230\u5176\u4ed6\u5065\u5eb7\u7684\u670d\u52a1\u8282\u70b9\u4e0a\u3002\u540c\u65f6\u5ba2\u6237\u7aef\u4e5f\u5b58\u5728\u91cd\u8bd5\u673a\u5236\uff0c\u7531\u4e8e\u5065\u5eb7\u68c0\u67e5\u5b58\u5728\u65f6\u95f4\u95f4\u9694\uff0c\u53ef\u80fd\u670d\u52a1\u7aef\u8fdb\u7a0b\u6302\u6389\u540e\uff0c\u4ecd\u9700\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u624d\u88abConsul\u53d1\u73b0\uff0c\u8fd9\u65f6\u5ba2\u6237\u7aef\u5982\u679c\u8bf7\u6c42\u5230\u6302\u6389\u7684\u670d\u52a1\u8282\u70b9\u4e0a\u5931\u8d25\u540e\uff0c\u5ba2\u6237\u7aef\u4f1a\u5c1d\u8bd5\u8bf7\u6c42\u5176\u4ed6\u670d\u52a1\u8282\u70b9\u8fdb\u884c\u91cd\u8bd5\u3002","title":"\u5065\u5eb7\u68c0\u67e5"},{"location":"#_4","text":"\u670d\u52a1\u6ce8\u518c\u53d1\u73b0\u7684\u4f7f\u7528\u4e5f\u5f88\u7b80\u5355\uff0c\u8bf7\u8010\u5fc3\u770b\u5b8c\u3002 - \u7b2c\u4e00\u6b65\uff0c\u4f60\u9700\u8981\u5b9a\u4e49\u4e00\u4e2aDiscoverConfig\u5bf9\u8c61\u3002 \u6307\u5b9a\u7528\u4e8e\u670d\u52a1\u6ce8\u518c\u53d1\u73b0\u7684Consul\u7684\u5730\u5740\u548c\u7aef\u53e3\u3002\u540c\u65f6\u901a\u8fc7serviceName\u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u670d\u52a1\u540d\u79f0\uff08\u7528\u4e8e\u6807\u8bb0\u670d\u52a1\u7aef\u670d\u52a1\uff09\u3002\u540c\u65f6\u6307\u5b9a\u670d\u52a1\u7aef\u76d1\u542c\u7684\u5730\u5740\u548c\u7aef\u53e3\u3002 from agileutil.rpc.discovery import DiscoveryConfig disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) \u8bf4\u660e: 1.consulHost \u548c consulPort \u53c2\u6570\u6307\u5b9aConsul\u7684\u5730\u5740\u548c\u7aef\u53e3 2.ServiceName \u53c2\u6570\u7528\u4e8e\u6807\u8bb0\u670d\u52a1\u7aef\u540d\u79f0\uff0c\u5e76\u901a\u8fc7\u670d\u52a1\u540d\u79f0\u8fdb\u884c\u670d\u52a1\u53d1\u73b0\uff0c\u9700\u8981\u4fdd\u8bc1\u5168\u5c40\u552f\u4e00 3.serviceHost\u548cservicePort\u53c2\u6570\u6307\u5b9a\u670d\u52a1\u7aef\u76d1\u542c\u7684\u7aef\u53e3\u548c\u5730\u5740 \u7b2c\u4e8c\u6b65\u3001\u8c03\u7528setDiscoverConfig()\u65b9\u6cd5\u5c06DiscoveryConfig\u5bf9\u8c61\u4f20\u5165 \u7b2c\u4e09\u6b65\uff0c\u4e4b\u540e\u8c03\u7528serve()\u65b9\u6cd5\uff0c\u5f00\u59cb\u5904\u7406\u8bf7\u6c42 s = TcpRpcServer('0.0.0.0', 9988) s.regist(sayHello) disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) s.setDiscoverConfig(disconf) s.serve()","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"#_5","text":"from agileutil.rpc.server import TcpRpcServer from agileutil.rpc.discovery import DiscoveryConfig from agileutil.util import local_ip def sayHello(): return 'hello ' s = TcpRpcServer('0.0.0.0', 9988) s.regist(sayHello) disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) s.setDiscoverConfig(disconf) s.serve()","title":"\u5b8c\u6574\u7684\u670d\u52a1\u7aef\u793a\u4f8b"},{"location":"#_6","text":"\u521b\u5efaDiscoveryConfig\u5bf9\u8c61\uff0c\u6307\u5b9aConsul\u7684\u5730\u5740\u7aef\u53e3. serviceName\u53c2\u6570\u548c\u670d\u52a1\u7aef\u7684\u4fdd\u6301\u4e00\u81f4\uff0c\u4e14\u5168\u5c40\u552f\u4e00 \u8c03\u7528call()\u65b9\u6cd5\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u65b9\u6cd5\u540d\u548c\u53c2\u6570 from agileutil.rpc.client import DiscoveryTcpRpcClient from agileutil.rpc.discovery import DiscoveryConfig cli = DiscoveryTcpRpcClient(DiscoveryConfig(consulHost='192.168.19.103', consulPort=8500, serviceName='test-rpc-server')) for i in range(10): resp = cli.call(func = 'sayHello') print(resp)","title":"\u5b8c\u6574\u7684\u5ba2\u6237\u7aef\u793a\u4f8b"},{"location":"#orm","text":"\u5b9a\u4e49\u4e00\u4e2anation\u8868\uff0c\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5\uff1aid\u5b57\u6bb5\u548cname\u5b57\u6bb5 CREATE TABLE `nation` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(32) DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 \u9996\u5148\u8c03\u7528Model.init()\u65b9\u6cd5\uff0c\u8bbe\u7f6emysql\u8fde\u63a5\u5730\u5740\u7b49\u4fe1\u606f \u7136\u540e\u4e3anation\u8868\u5b9a\u4e00\u4e2aNation\u7c7b\uff0c\u5e76\u7ee7\u627f\u81eaModel\u7c7b \u6307\u5b9a\u5b57\u6bb5\u7c7b\u578b from agileutil.orm import Model, IntField, CharField Model.init('127.0.0.1', 3306, 'root', '', 'test2', min_conn_num=10) class Nation(Model): tableName = 'nation' #required primaryKey = 'id' #required id = IntField() #field type int name = CharField() #field type char","title":"ORM"},{"location":"#_7","text":"Nation(name='test').create()","title":"\u521b\u5efa\u8bb0\u5f55"},{"location":"#_8","text":"obj = Nation.filter('name', '=', 'test').first() print(obj.name, obj.id)","title":"\u67e5\u8be2\u4e00\u6761\u8bb0\u5f55"},{"location":"#_9","text":"objs = Nation.filter('name', '=', 'test') for obj in objs: print(obj.name, obj.id)","title":"\u67e5\u8be2\u591a\u6761\u8bb0\u5f55"},{"location":"#_10","text":"obj = Nation.filter('name', '=', 'test').first() obj.name = 'test update' obj.update()","title":"\u4fee\u6539\u8bb0\u5f55"},{"location":"#_11","text":"Nation.filter('name', '=', 'test').delete() \u53e6\u4e00\u79cd\u5220\u9664\u7684\u65b9\u5f0f obj = Nation.filter('name', '=', 'test').first() obj.delete()","title":"\u5220\u9664\u8bb0\u5f55"},{"location":"#pooldb","text":"PooolDB\u5b9e\u73b0\u4e86\u6570\u636e\u5e93\u8fde\u63a5\u6c60\uff0c\u5e76\u4e14ORM\u529f\u80fd\u662f\u57fa\u4e8ePoolDB\u5b9e\u73b0\u7684\u3002\u5bf9\u4e8e\u5e38\u7528\u7684\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u4f7f\u7528ORM\uff0c\u76f4\u63a5\u4f7f\u7528PoolDB\u4e5f\u662f\u53ef\u4ee5\u7684\u3002","title":"PoolDB"},{"location":"#pooldb_1","text":"from agileutil.db4 import PoolDB db = PoolDB(host='127.0.0.1', port=3306, user='root', passwd='', dbName='test2', min_conn_num=10) db.connect()","title":"\u5b9a\u4e49 PoolDB \u5bf9\u8c61."},{"location":"#_12","text":"sql = 'select * from nation' rows = db.query(sql) print(rows)","title":"\u67e5\u8be2\u8bb0\u5f55"},{"location":"#_13","text":"sql = insert into nation(name) values('test') effect, lastid = db.update(sql) print(effect,lastid) sql = delete from nation where name='test' effect, _ = db.update(sql) print(effect,lastid)","title":"\u5220\u9664\u3001\u4fee\u6539\u3001\u63d2\u5165\u8bb0\u5f55"},{"location":"#db","text":"DB \u662f\u4e00\u4e2a\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u7c7b\uff0c\u548cPoolDB\u7684\u533a\u522b\u662f\uff0c\u5b83\u4e0d\u652f\u6301\u6570\u636e\u5e93\u8fde\u63a5\u6c60\uff0c\u56e0\u6b64\u66f4\u5efa\u8bae\u4f7f\u7528PoolDB.\u5b83\u7684\u7528\u6cd5\u548cPoolDB\u662f\u76f8\u4f3c\u7684\u3002","title":"DB"},{"location":"#db_1","text":"from agileutil.db import DB db = DB(host='127.0.0.1', port=3306, user='root', passwd='', dbName='test2')","title":"\u5b9a\u4e49DB\u5bf9\u8c61"},{"location":"#_14","text":"sql = 'select * from nation' rows = db.query(sql) print(rows)","title":"\u67e5\u8be2\u8bb0\u5f55"},{"location":"#_15","text":"sql = insert into nation(name) values('test') effetc = db.update(sql) print(effetc, db.lastrowid())","title":"\u4fee\u6539\u3001\u5220\u9664\u3001\u63d2\u5165\u8bb0\u5f55"},{"location":"#_16","text":"Agileutil\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684Log\u5bf9\u8c61\uff0c\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\u3002 from agileutil.log import Log logger = Log('./debug.log') logger.info(123, '456') logger.warning('warning') logger.error('error')","title":"\u65e5\u5fd7"},{"location":"#_17","text":"\u9ed8\u8ba4\u65e5\u5fd7\u6309\u5929\u5206\u5272\uff0c\u4fdd\u7559\u6700\u8fd17\u5929\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u65e5\u5fd7\u4fdd\u7559\u7684\u5929\u6570\u3002 logger = Log('./debug.log', logSaveDays=7) logger.info('info') \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5f3a\u5236\u4e0d\u5207\u5272\u65e5\u5fd7\uff0c\u901a\u8fc7isRotate\u53c2\u6570\u3002 logger = Log('./debug.log', isRotate=False) logger.info('info')","title":"\u65e5\u5fd7\u5207\u5272"},{"location":"#error","text":"\u9ed8\u8ba4\u7684\uff0cERROR\u7ea7\u522b\u7684\u65e5\u5fd7\uff0c\u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u4f1a\u88ab\u6807\u7ea2\u8868\u793a\uff0c\u66f4\u52a0\u9192\u76ee\uff0c\u4fbf\u4e8e\u6392\u67e5\u95ee\u9898\u3002 logger.error('runtimee exception raise')","title":"ERROR\u7ea7\u522b\u65e5\u5fd7"},{"location":"#_18","text":"","title":"\u81f4\u8c22"},{"location":"en/","text":"Agileutil Agileutil is a Python 3 rpc framework that\u2019s written to develop fast. It allows the usage of the rpc/http/orm package, which makes your code speedy and includes many commonly used functions. Agileutil aspires to be simple. Install pip install agileutil RPC Agileutil provides a simple RPC call.Its underlying infrastructure is based on TCP and the pickle serialization facility. TCP RPC server from agileutil.rpc.server import TcpRpcServer def sayHello(name): return 'hello ' + name nationServer = TcpRpcServer('0.0.0.0', 9988, workers=4) nationServer.regist(sayHello) nationServer.serve() TCP RPC client from agileutil.rpc.client import TcpRpcClient c = TcpRpcClient('127.0.0.1', 9988) resp = c.call(func = 'sayHello', args = ('zhangsan')) print('resp', resp) Tornado RPC server TCP server have two choice, These are TcpRpcServer and TornadoTcpRpcServer. The TronadoTcpServer class was based on Tornado, a python high-performance net libiary. from agileutil.rpc.server import TornadoTcpRpcServer def rows(): return {'name' : 123} s = TornadoTcpRpcServer('127.0.0.1', 9988) s.regist(rows) s.serve() Tornado RPC client As same as TcpRpcServer, use TcpRpcClient object. from agileutil.rpc.client import TcpRpcClient c = TcpRpcClient('127.0.0.1', 9988) resp = c.call(func = 'rows')) print('resp', resp) HTTP RPC Server Agileutil also provides Remote Procedure Call (RPC) based on HTTP protocol, with the underlying implementation based on HTTP protocol and high performance Sanic web framework.It is very simple to use and is very similar to TcpRpcServer. from agileutil.rpc.server import HttpRpcServer def sayHello(name): return 'hello ' + name s = HttpRpcServer('0.0.0.0', 9988, workers=1) s.regist(sayHello) s.serve() HTTP RPC Client Again, the client needs to use the corresponding HttpRcpClient. from agileutil.rpc.client import HttpRpcClient cli = HttpRpcClient('127.0.0.1', 9988) for i in range(10): resp = cli.call(func = 'sayHello', args=('zhangsan')) print('resp', resp) UDP RPC server If you want to use UDP, just change TcpRpcServer to UdpRpcServer. from agileutil.rpc.server import UdpRpcServer def sayHello(name): return 'hello ' + name s = UdpRpcServer('0.0.0.0', 9988) s.regist(sayHello) s.serve() UDP RPC client from agileutil.rpc.client import UdpRpcClient cli = UdpRpcClient('127.0.0.1', 9988) for i in range(5000): resp = cli.call(func = 'sayHello', args =('xiaoming') ) print(resp) Service discovery Currently only Consul based service registration and discovery is supported.Future plans support ETCD. Health check If the server process is Down, The client will make requests to other healthy server instances(This health Check is based on Consul's Check mechanism implementation). Quick start The first step, you need a DiscoveryConfig object to specify Consul's address port and your service name, which needs to be globally unique. from agileutil.rpc.discovery import DiscoveryConfig disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) Note: - The parameters consulHost and consulPort specify the address and port of consul. The parameter ServiceName is used to mark the service, which should be globally unique. Service registration discovery is implemented by the service name The serviceHost and servicePort parameters specify the address and port for the current server to listen on.You need to ensure that the address and port can be connected by the client. The second step\uff0cthe setDiscoverConfig() method needs to be called before the serve() method, as follows: s = TcpRpcServer('0.0.0.0', 9988) s.regist(sayHello) disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) s.setDiscoverConfig(disconf) s.serve() Complete server-side example from agileutil.rpc.server import TcpRpcServer from agileutil.rpc.discovery import DiscoveryConfig from agileutil.util import local_ip def sayHello(): return 'hello ' s = TcpRpcServer('0.0.0.0', 9988) s.regist(sayHello) disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) s.setDiscoverConfig(disconf) s.serve() Complete client-side example Initialize a DiscoveryTcpRpcClient object from the DiscoveryConfig object from agileutil.rpc.client import DiscoveryTcpRpcClient from agileutil.rpc.discovery import DiscoveryConfig cli = DiscoveryTcpRpcClient(DiscoveryConfig(consulHost='192.168.19.103', consulPort=8500, serviceName='test-rpc-server')) for i in range(10): resp = cli.call(func = 'sayHello') print(resp) ORM Define a table named Nation with two filed: id(int, promary key) and name(varchar). CREATE TABLE `nation` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(32) DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 First call Model.init() method and set min_conn_num param's value for database connection pool, then define a class which was extend Model class. from agileutil.orm import Model, IntField, CharField Model.init('127.0.0.1', 3306, 'root', '', 'test2', min_conn_num=10) class Nation(Model): tableName = 'nation' #required primaryKey = 'id' #required id = IntField() #field type int name = CharField() #field type char Create Nation(name='test').create() Read one obj = Nation.filter('name', '=', 'test').first() print(obj.name, obj.id) Read list objs = Nation.filter('name', '=', 'test') for obj in objs: print(obj.name, obj.id) Update obj = Nation.filter('name', '=', 'test').first() obj.name = 'test update' obj.update() Delete Nation.filter('name', '=', 'test').delete() Delete by object obj = Nation.filter('name', '=', 'test').first() obj.delete() PoolDB PoolDB is a database connection pool class.It is easy to use.ORM function was developed base on PoolDB. If you want to do CRUD on database without orm, you can use this class. Define PoolDB object. from agileutil.db4 import PoolDB db = PoolDB(host='127.0.0.1', port=3306, user='root', passwd='', dbName='test2', min_conn_num=10) db.connect() Search sql = 'select * from nation' rows = db.query(sql) print(rows) Update (include delete, update, create) sql = insert into nation(name) values('test') effect, lastid = db.update(sql) print(effect,lastid) sql = delete from nation where name='test' effect, _ = db.update(sql) print(effect,lastid) DB DB is a database class without connection pool.Its use is similar to that of PoolDB. Define DB object. from agileutil.db import DB db = DB(host='127.0.0.1', port=3306, user='root', passwd='', dbName='test2') Search sql = 'select * from nation' rows = db.query(sql) print(rows) Update (include delete, update, create) sql = insert into nation(name) values('test') effetc = db.update(sql) print(effetc, db.lastrowid()) Log Agileutil provides a thread-safe logging tool.It's very simple to use. from agileutil.log import Log logger = Log('./debug.log') logger.info(123, '456') logger.warning('warning') logger.error('error') Log rotate The log will be stored for 7 days as follows.One log file is generated per day. logger = Log('./debug.log', logSaveDays=7) logger.info('info') Of course, you can also force logs not to be rotated. logger = Log('./debug.log', isRotate=False) logger.info('info') Error log By default, ERROR level logs are highlighted in red. Runtime information is appended to the original log. logger.error('runtimee exception raise') Thanks","title":"Agileutil"},{"location":"en/#agileutil","text":"Agileutil is a Python 3 rpc framework that\u2019s written to develop fast. It allows the usage of the rpc/http/orm package, which makes your code speedy and includes many commonly used functions. Agileutil aspires to be simple.","title":"Agileutil"},{"location":"en/#install","text":"pip install agileutil","title":"Install"},{"location":"en/#rpc","text":"Agileutil provides a simple RPC call.Its underlying infrastructure is based on TCP and the pickle serialization facility.","title":"RPC"},{"location":"en/#tcp-rpc-server","text":"from agileutil.rpc.server import TcpRpcServer def sayHello(name): return 'hello ' + name nationServer = TcpRpcServer('0.0.0.0', 9988, workers=4) nationServer.regist(sayHello) nationServer.serve()","title":"TCP RPC server"},{"location":"en/#tcp-rpc-client","text":"from agileutil.rpc.client import TcpRpcClient c = TcpRpcClient('127.0.0.1', 9988) resp = c.call(func = 'sayHello', args = ('zhangsan')) print('resp', resp)","title":"TCP RPC client"},{"location":"en/#tornado-rpc-server","text":"TCP server have two choice, These are TcpRpcServer and TornadoTcpRpcServer. The TronadoTcpServer class was based on Tornado, a python high-performance net libiary. from agileutil.rpc.server import TornadoTcpRpcServer def rows(): return {'name' : 123} s = TornadoTcpRpcServer('127.0.0.1', 9988) s.regist(rows) s.serve()","title":"Tornado RPC server"},{"location":"en/#tornado-rpc-client","text":"As same as TcpRpcServer, use TcpRpcClient object. from agileutil.rpc.client import TcpRpcClient c = TcpRpcClient('127.0.0.1', 9988) resp = c.call(func = 'rows')) print('resp', resp)","title":"Tornado RPC client"},{"location":"en/#http-rpc-server","text":"Agileutil also provides Remote Procedure Call (RPC) based on HTTP protocol, with the underlying implementation based on HTTP protocol and high performance Sanic web framework.It is very simple to use and is very similar to TcpRpcServer. from agileutil.rpc.server import HttpRpcServer def sayHello(name): return 'hello ' + name s = HttpRpcServer('0.0.0.0', 9988, workers=1) s.regist(sayHello) s.serve()","title":"HTTP RPC Server"},{"location":"en/#http-rpc-client","text":"Again, the client needs to use the corresponding HttpRcpClient. from agileutil.rpc.client import HttpRpcClient cli = HttpRpcClient('127.0.0.1', 9988) for i in range(10): resp = cli.call(func = 'sayHello', args=('zhangsan')) print('resp', resp)","title":"HTTP RPC Client"},{"location":"en/#udp-rpc-server","text":"If you want to use UDP, just change TcpRpcServer to UdpRpcServer. from agileutil.rpc.server import UdpRpcServer def sayHello(name): return 'hello ' + name s = UdpRpcServer('0.0.0.0', 9988) s.regist(sayHello) s.serve()","title":"UDP RPC server"},{"location":"en/#udp-rpc-client","text":"from agileutil.rpc.client import UdpRpcClient cli = UdpRpcClient('127.0.0.1', 9988) for i in range(5000): resp = cli.call(func = 'sayHello', args =('xiaoming') ) print(resp)","title":"UDP RPC client"},{"location":"en/#service-discovery","text":"Currently only Consul based service registration and discovery is supported.Future plans support ETCD.","title":"Service discovery"},{"location":"en/#health-check","text":"If the server process is Down, The client will make requests to other healthy server instances(This health Check is based on Consul's Check mechanism implementation).","title":"Health check"},{"location":"en/#quick-start","text":"The first step, you need a DiscoveryConfig object to specify Consul's address port and your service name, which needs to be globally unique. from agileutil.rpc.discovery import DiscoveryConfig disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) Note: - The parameters consulHost and consulPort specify the address and port of consul. The parameter ServiceName is used to mark the service, which should be globally unique. Service registration discovery is implemented by the service name The serviceHost and servicePort parameters specify the address and port for the current server to listen on.You need to ensure that the address and port can be connected by the client. The second step\uff0cthe setDiscoverConfig() method needs to be called before the serve() method, as follows: s = TcpRpcServer('0.0.0.0', 9988) s.regist(sayHello) disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) s.setDiscoverConfig(disconf) s.serve()","title":"Quick start"},{"location":"en/#complete-server-side-example","text":"from agileutil.rpc.server import TcpRpcServer from agileutil.rpc.discovery import DiscoveryConfig from agileutil.util import local_ip def sayHello(): return 'hello ' s = TcpRpcServer('0.0.0.0', 9988) s.regist(sayHello) disconf = DiscoveryConfig( consulHost = '192.168.19.103', consulPort = 8500, serviceName = 'test-rpc-server', serviceHost = local_ip(), servicePort = 9988 ) s.setDiscoverConfig(disconf) s.serve()","title":"Complete server-side example"},{"location":"en/#complete-client-side-example","text":"Initialize a DiscoveryTcpRpcClient object from the DiscoveryConfig object from agileutil.rpc.client import DiscoveryTcpRpcClient from agileutil.rpc.discovery import DiscoveryConfig cli = DiscoveryTcpRpcClient(DiscoveryConfig(consulHost='192.168.19.103', consulPort=8500, serviceName='test-rpc-server')) for i in range(10): resp = cli.call(func = 'sayHello') print(resp)","title":"Complete client-side example"},{"location":"en/#orm","text":"Define a table named Nation with two filed: id(int, promary key) and name(varchar). CREATE TABLE `nation` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(32) DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 First call Model.init() method and set min_conn_num param's value for database connection pool, then define a class which was extend Model class. from agileutil.orm import Model, IntField, CharField Model.init('127.0.0.1', 3306, 'root', '', 'test2', min_conn_num=10) class Nation(Model): tableName = 'nation' #required primaryKey = 'id' #required id = IntField() #field type int name = CharField() #field type char","title":"ORM"},{"location":"en/#create","text":"Nation(name='test').create()","title":"Create"},{"location":"en/#read-one","text":"obj = Nation.filter('name', '=', 'test').first() print(obj.name, obj.id)","title":"Read one"},{"location":"en/#read-list","text":"objs = Nation.filter('name', '=', 'test') for obj in objs: print(obj.name, obj.id)","title":"Read list"},{"location":"en/#update","text":"obj = Nation.filter('name', '=', 'test').first() obj.name = 'test update' obj.update()","title":"Update"},{"location":"en/#delete","text":"Nation.filter('name', '=', 'test').delete() Delete by object obj = Nation.filter('name', '=', 'test').first() obj.delete()","title":"Delete"},{"location":"en/#pooldb","text":"PoolDB is a database connection pool class.It is easy to use.ORM function was developed base on PoolDB. If you want to do CRUD on database without orm, you can use this class.","title":"PoolDB"},{"location":"en/#define-pooldb-object","text":"from agileutil.db4 import PoolDB db = PoolDB(host='127.0.0.1', port=3306, user='root', passwd='', dbName='test2', min_conn_num=10) db.connect()","title":"Define PoolDB object."},{"location":"en/#search","text":"sql = 'select * from nation' rows = db.query(sql) print(rows)","title":"Search"},{"location":"en/#update-include-delete-update-create","text":"sql = insert into nation(name) values('test') effect, lastid = db.update(sql) print(effect,lastid) sql = delete from nation where name='test' effect, _ = db.update(sql) print(effect,lastid)","title":"Update (include delete, update, create)"},{"location":"en/#db","text":"DB is a database class without connection pool.Its use is similar to that of PoolDB.","title":"DB"},{"location":"en/#define-db-object","text":"from agileutil.db import DB db = DB(host='127.0.0.1', port=3306, user='root', passwd='', dbName='test2')","title":"Define DB object."},{"location":"en/#search_1","text":"sql = 'select * from nation' rows = db.query(sql) print(rows)","title":"Search"},{"location":"en/#update-include-delete-update-create_1","text":"sql = insert into nation(name) values('test') effetc = db.update(sql) print(effetc, db.lastrowid())","title":"Update (include delete, update, create)"},{"location":"en/#log","text":"Agileutil provides a thread-safe logging tool.It's very simple to use. from agileutil.log import Log logger = Log('./debug.log') logger.info(123, '456') logger.warning('warning') logger.error('error')","title":"Log"},{"location":"en/#log-rotate","text":"The log will be stored for 7 days as follows.One log file is generated per day. logger = Log('./debug.log', logSaveDays=7) logger.info('info') Of course, you can also force logs not to be rotated. logger = Log('./debug.log', isRotate=False) logger.info('info')","title":"Log rotate"},{"location":"en/#error-log","text":"By default, ERROR level logs are highlighted in red. Runtime information is appended to the original log. logger.error('runtimee exception raise')","title":"Error log"},{"location":"en/#thanks","text":"","title":"Thanks"}]}